CSS stands for Cascading Style Sheet
It gives a page visuals and all the styling
It is basically the visual features of a webpage
It used together HTML and used to design webpages
It saved with .css extension and linked to a HTML page
CSS is linked to HTML by using a anchor link in the HEAD part of HTML page
<!-- <head>
<a rel="stylesheet" href="location of css" type="text/css">
</head> -->
how to test a CSS file? Simply make any changes like adding some properties or just anything and see if it reflects, if it does not then there's soemthign wrong.
The usual Syntax of CSS is:
<!-- Selector {
    property1: value;
    property1: value;
    property1: value;
} -->
CSS Selectors: VVVVV Important 
HTML and CSS are not exactly linked so you cannot expect changes or styling to takeplace appropriately. 
HEnce we use selectors, they are a way of GRABBING and MANIPULATING HTML
There are differnet ways, different types and each used for differnet reaoson. But they all turn out pretty much the same
1. Element Selector: Selects a element and takes value or styles them
<!-- EG: h1 {
    color: blue;
} -->
2. Class Selector: Lets you select HTML element based on their class attribute.
In order to select using a class element , we need to use a '.'(period) prior to it.
<!-- .class_name {
    property: value;
} --> 
Used for reusuable components
Class selector is the most used
3. ID Selector: Similar to class selector but it allows you to select elements using the ID attribute since a ID is unique acroos the webpage.
It can be enforced using '#'
<!-- #id {
    property: value;
} -->
It is redundant, cannot be used for many components or difficult to use for all components

CSS has multiple ways to combine selectors in order to make your selectors more specific
1. First way:
Eg: You want to select a class X and ID y
.x#y {
    color: blue;
    font-sizze: ;
}
<!-- .selector-1.selector-2 {
    property: value;
} -->
You can do this as many times as you want
2. Second way: 
Use multiple selectors to specify the ancestor of an element
Eg: You want all P tags inside of Div:
div p {
    property: value;
}
<!-- .ancestor .child {
    property: value;
} -->
You can combine the above two selectors too.
3. Last common selectors combination is to share set of style properties and values between multiple selectors
Suppose you have a class A and class B that both have the same property and same value,
THen you can combine by using a comma:
<!-- .A, .B {
    property: value;
} -->
This allows us to avoid duplication.
4. The everything selector: Used to select every elemnt in the entire webpage
Usually used for Fonts of the webpage or some defaults.
It is done using *
<!-- * {
    font-size: 10px;
} -->

TYPES OF SELECTORS:
1. Universal (*) : Selects all elements on the page
2. type (element_type) : Selects all elements of that elemetn type
3. ID, Class and Element selector:  Refer above, covered in detail
Refrain from using ID selector as only one ID selector can be used in one webpage  

Selector Combinators atleast the common ones are mentioned above already.
4. What if you want to do something nuanced and more specific? Like selecting elements inside a element?:
Eg: You want all li elements inside the ul tag:
<!-- ul li { // Here we give space bw the elements
    property: value;
}  -->
5. We can also use '>' in order to get the direct child: It only selects the direct child of the element or selector
6. Siblings Selectors: It gives the sibling of an element,
What is a sibling? all elements inside a tag for example:
<!-- <body>
<nav> 
<ul> 
<li> <li>
</ul> 
</body>
Here all the elements or tags inside body are siblings of Body-->
How to use sibling selector in CSS?
<!-- element.class ~ element{  // we use '~'Gets all siblings after the element
    property: value;
} -->
What if you just want one sibling?
<!-- element.class + element{ // we use + to get just the direct sibling
    property: value;
} -->


HOW TO LOAD CSS?
1. Inline styling in HTML - Worst way to style webpage
2. Adding a style element in the Head element of the HTML page but its still bad 
3. Use seperate CSS file and link it to HTML

Element Selectors are the lowest level selectors in CSS so mostly overwritten. 
Class can only be overridden by ID
ID is the highest level
Number of elements matter if same then the level of selectors comes in to play
In line styling will override anything though

How to define colours?
We define colours by either typing the color or choosing from RGB or by mentioning the HexaDecimal nos
<!-- #FFFFFF   || Since we are using Hexadecimal, it takes 0-9 and A-F(10-16)
here, each 2 digits represent a colour.
FF-- RED, FF-- GREEN, FF-- BLUE -->
Transparency is given in the same way except for we add two more digits 
<!-- 000000FF -- Full opac
00000000 -- Fully transparent -->
hs1 stands for HUE SATURATION :
Eg:
<!-- hs1: (0,100%,50%,1) -->

Let us style a BOX:
We need to call the class or ID and then specify the styling of box as below syntax:
<!-- .class {
    height: value;
    width: value;
    padding: value;
    margin: value;
    border: value;
    background-colour: value;
} -->
Specificity: 
CSS reads top to bottom so if two values for same tag and proeoprty are given. The one at the bottom or last will be executed(Will override the initial one).
Points:
Class is more specific than element
ID is more specific than Classes
In-line styling has the highest specificity
<!-- Eg: 1,0,0,0 means inline element
0,1,0,0 here, 2nd column is ID, third is class and last is element
0,0,1,0 
0,0,0,1
Let's say there is no line element or the 1st column of all specificity is 0
then CSS moves to next column, the one with 1 will be specified or executed
if even all 2nd columns are zero we goto 3rd column and so on. 
But if there are say two selectors, the one which is larger is executed
Eg: 0,0,1,1 and 0,0,1,0
Although the first columns are same, the first one is larger so that will be having higher specificity
This is how CSS determines the specificity -->
one way to get around specificity though is by using the 'Important' keyword
It creates a own level of specificity like a 5th level
Syntax: 
<!-- 1,0,0,0,0 
    .class {
    property: value !important;
} -->
'Important' keyword essentially overrides all specificity. 
But it follows other specificity rules
(Look at code for demonstration)
In use cases, Using important is difficult esspecially to work around so try avoiding it
When it comes to actual specificity, Things that do not effect it are actually the other selectors such as direct sibling or so on.
Only class,ID, In-line and element selectors and combinators matter.
You can debug or know your specificityu= using the "Inspect Element" option 
