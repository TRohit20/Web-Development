Very Important NOTE: A SINGLE ERROR CAN LEAD TO A CASCADE OF ERRORS

1.head elements cannot have elements like p inside of them
2. There are 3 different types of lists: ordered, unordered, Descriptive
3. two parts to a HTMl: Head(data that cannot be seen except for the title) and Body(Contains data that is visible on the site)
4. Head is the part of the HTMl where CSS files or JS files are linked to the HTMl
5. Body is the part of HTMl that contains data which will be interactive or visible
6. H1 can only be used once in a HTML file
7. Strong, abbr(abbriveations), em(emphasize) are few elements used to emphasize or bold the text between their tags
8. Links can be attached to the html page in multiple ways:
Anchor tag "<a></a>" is used for adding links or images
(i) Absolute Link reference where the link is from outside our project or on the web. link can be copied and linked
(ii) Relative Links are those which are files present in same folder as our project they can be directly linked by typing the name and extension
(iii) A link to different section on the same page. It refers to a section inside the page or internal reference.
We do that using sections tag along with ID attribute for reference.
NOTE: All the links syntax is identical to follow: <a href="link" >text to be clicked upon for accessing link</a>
Sections need to have Headings nested inside of them.
<nav></nav> tags are used to create navigation bar for the use of internal link reference.
anchor tag with # is used as a internal link to point back to the top.

LINK NAMING CONVENTIONS:
Avoid printing full website links, instead use abbriveations like a short name
Avoid "links to" phrase
Keep the link text as shorrt as possible. Topic not sentences
Never use "Click here", rather use topics.

A link to downlaod a file we have can be given by anchor tag along with download attribute
Cannot have download or links inside dl or dd 
Next up: 
ADDING IMAGES TO HTML Files.(Using the img tag)
The syntax is as given below: Img tag does not have a ending tag or it ends with /> which means it is self closing(not required in HTML5).
<img src="" alt"" title="" width="" height="" loading="">  here: src refers to the source of the image and 'alt' is a text reference in case of image not being viewed or loaded.
Attributes are key to adding a image. the above is syntax for relative linking of the image.
Loading attribute should be provided when required or by defaulft it is set to being eager.
Lazy is given as loading attribute in case when the image needs to be loaded only when it needs to be demonstrated.
Using lazy is a good technique when you are using a lot of images on your webpage 
A QUICK TIP:
Instead of typing br multiple times just time br*nooftimes you want it.
Now "Figure" is a new element can be used to wrap around image. SYNTAX:
<!-- <figure> image is inside the figure elemt and we add a caption related to the image. it is directly related to the image inside.
we add the caption using FIGCAPTION element</figure> -->
<figure>img <figcaption> caption realted to the image goes here </figcaption></figure>
A FIGCAPTION can either the first thing or the last thing inside a figure element 
Next Up: SEMANTIC TAGS: 
Hierachy of headers: only one H1 per page! H1>2>3 etc
Nav is another semantic link that allows us to see different links 
HR is used to topic change
3 main areas :
1.Header for the page(heading), they can be more than 1 header per page.
2. Main element: There can only be 1 main element/page. It usually contents the main area of content 
3. Footer is another element that can more than one in a web. It is a footer to the page.
These three semantics make it easy to divide the page into sections.
There can be more than one Nav tag per page but in this case they should be labelled. Using a attribute: aria-label=""
More appropriate tag to break topics than sections for articles or blogs are "article" element.
Article has a clear topic while section can be generic 
You can nest a section or put a section inside a Article
Another semantic element can be 'aside' it is a sidebar which is content but not as important. It is complimentary text. 
The details summary work together
Another semantic element is called "mark" which is used to highlight the text between its tags
We can also use "time" semantic elemtn to add some meaning any time stamps on webpage. Using it does not change anything visually but it adds semantic meaning.
Also, it is worth noting that you can use paragraphs and lists under description elements
Two elements that are better to be avoided when learning HTML but better to use when using CSS,they are: Div and Span
These are mostly used for CSS styling
Div stands for divider and it is very much the same as section element, they are blovk elements so using them means having to add many attributes to give it meaning and make it understandable for softwares
CREATING TABLES:
Some use cases of tables are schedules display, display of data in rows and columns, statistics and scores.
When to avoid using tables ? To design or structure the entire page data.
Tables need CSS usually to make it look appealing. 
Syntax to add a table:
table element/tag to create the table, can be used inside a section or individually too.
'tr' element stands for Table Row.
Inside the Table row,we put our data cells using 'td' elements.
'td' stands for Table Data
You need a heading for every section.
And to add a heading to columns of our table, we use a element or tag called "th" which stands for Table Header

<!-- <table>
<th> Time</th>
<th> Activity During that Time</th> 
<tr> 
 <td> You can put your information here such as time or any information </td>
 </tr>
     </table> -->
     Above is a general syntax.
     Tables usually require CSS to look like a actual table and make it look appealing.
Tables does not take up the full width of the page automatically. Unlike other elements such as lists or paragraphs etc.
WHAT IF YOU WANT A ROW WHICH HAS ONE CELL THAT NEEDS MORE THAN ONE COLUMN?
We can do that by adding a attribute to 'td' element.
The attribute is called 'colspan'
Similarly, We can do it for rows using 'rowspan' element in the 'td' element.
You can add semantics to tables too like captions
Using caption inside table makes it a heading without requiring to use colspan.
'thead' is another element that is used to give the headers or column headings of the table. It does not change any looks but it adds semantic 
Similar to it, is 'tbody' it is used to cover the body elements or basically the information rows of the table.
You can also add a 'tfoot' section to add a footer to the table.
We can add headings to the rows too using the th inside tr.
Some more semantics to keep in mind are:
We goto headings and give the 'scope' of the headings as in what the headings are for eg rows or columns.
We add it as attribute to the headings
THERE is another way you can do that by adding a ID attribute to th and header attribute to td. but it is better to use just Scope instead.
SEMANTICS NEVER CHANGE THE LOOK BUT ADD SENSE TO HTML
Next:
Making HTML interactive by letting the users of HTML send us information using forms.
It allows users to give inputs and that is given to us if they choose to.
We add a FORM to the HTML using the 'form' tag along with action attribute and method attribute:
<!-- <form action="usually mention your own server" method="get"> </form> -->
Method can either be get or post
Content of Forms are mostly either label and inputs.
Each input should have a label
Label should have a 'for' attribute.
The 'For' attribute value should match the ID value of input

<!-- Syntax for label and input :
<label for="Same ID value as the input"> </label>
<input type="" name="How it identified on server side" id="same as label" placeholer="This displays the text here but only as sample."> -->
PlaceHolder just holds the example data for user reference.
Another attribute you can add is "autocomplete", it suggests user input based on previous submissions to the form.
<!-- Syntax:
<form action="https://httpbin.org/get" method="get">
<label for="Message" > You can enter you test here: </label>
<input type="text" name="hello" id="Message" placeholder="Sample text" autocomplete="on"> -->
Some more attributes that can be or should be given to input are:
'required' and 'autofocus'
Required can 
Autofocus can only be assigned or as used as attribute for only one element or input on the page.
